{"version":3,"file":"static/js/117.9353a113.chunk.js","mappings":"qNAGMA,EAAW,CACf,qBACA,+BAIIC,EAAe,SAACC,GAGpB,OAAIF,EAAS,GAAGG,WAAWD,GAClBF,EAAS,GAEXA,EAAS,EACjB,EAoBKI,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAInB,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAiCF,EAAAA,EAAAA,UAASN,EAASO,IAAnD,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA2BJ,EAAAA,EAAAA,UAAS,GAApC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KAuBA,OAhDkB,SAACC,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CACzB,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SACf,GAAEJ,GACH,OAAO,kBAAMO,cAAcF,EAApB,CACR,CACD,OAAO,WAAQ,CAChB,GAAE,CAACL,GACL,CAWCQ,EAAY,WACV,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAXO,IAWQX,EAASO,GAAKoB,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAWzB,EAAS2B,OAClBtB,GACFG,EAAW,GACXI,EAAW,IAEXE,GAAY,IAGdJ,EAAcV,EAASyB,GAAQG,MAAM,EAAGF,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,GAExB,GAAEb,EA1BW,GA0BQ,OAGpB,gBACEgB,UAAU,mBACVC,MAAO7B,EAAaQ,GAAW,CAAC,EAAI,CAAEsB,MAAO,OAC7CC,aAAc,kBAAMlB,GAAY,EAAlB,EACdmB,aAAc,kBAAO1B,EAAMP,EAAS2B,QAAWb,GAAY,EAA7C,EAJhB,UAME,cAAGoB,KAAMjC,EAAaQ,GAAb,iBAAkCR,EAAaQ,IAAa,GAArE,UACE,0BAAOA,OAId,EAEDL,EAAU+B,aAAe,CACvB9B,aAAa,GAOf,Q,UC7DA,EApBgB,kBACd,SAAC+B,EAAA,EAAD,CACEC,MAAM,UACNC,YAAY,oEAFd,UAIE,qBAAST,UAAU,OAAOR,GAAG,UAA7B,WACE,6BACE,gBAAKQ,UAAU,QAAf,UACE,eAAI,cAAY,UAAhB,UAA0B,SAAC,KAAD,CAAMU,GAAG,WAAT,4BAG9B,iBAAKV,UAAU,WAAf,WACE,6EACA,SAAC,EAAD,CAAWxB,YAAY,aAEzB,SAACmC,EAAA,EAAD,QAfU,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nconst messages = [\n  'grecupito@unisa.it',\n  'recupito.gilberto@gmail.com',\n];\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  if (messages[0].startsWith(text)) {\n    return messages[0];\n  }\n  return messages[1];\n};\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      if (loopMessage) {\n        updateIter(0);\n        updateChar(0);\n      } else {\n        setIsActive(false);\n      }\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? `mailto:${validateText(message)}` : ''}>\n        <span>{message}</span>\n      </a>\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: false,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Gilberto Recupito via email @ recupito.gilberto@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink loopMessage=\"true\" />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["messages","validateText","text","startsWith","EmailLink","loopMessage","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","length","slice","className","style","color","onMouseEnter","onMouseLeave","href","defaultProps","Main","title","description","to","ContactIcons"],"sourceRoot":""}